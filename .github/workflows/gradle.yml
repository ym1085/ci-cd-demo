# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 어떠한 이벤트 발생 시 workflow 실행할 지 명시한다
on:
  # 여기서는 master 브랜치에 push, PR 이벤트 발생 시 이벤트가 동작한다
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # VM 실행 환경 지정 -> 현재는 우분투 최신 버전을 사용한다
    runs-on: ubuntu-latest
    permissions:
      contents: read

    # 실행될 jobs를 순서대로 명시한다
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # JDK 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle build (test 제외)
    - name: Build with Gradle
      run: ./gradlew clean build --exclude-task test

    # Dockerhub 로그인
    - name: Dockerhub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker 이미지 빌드
    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .

    # Push to DockerHub
    - name: DockerHub Push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

    # AWS EC2 접속 및 APP 실행
    - name: Run AWS EC2 Spring Boot Application
      uses: appleboy/ssh-action@v0.1.6
      with:
        hosts: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}

      script: |
        sudo docker kill ${{ secrets.PROJECT_NAME }}
        sudo docker rm -f ${{ secrets.PROJECT_NAME }}
        sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
        sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

        sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
        --name ${{ secrets.PROJECT_NAME }} \
        -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
        -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
    
