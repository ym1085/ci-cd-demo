# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 어떠한 이벤트 발생 시 workflow 실행할 지 명시한다
# 동작 조건을 설정하는 것인데 -> main 브랜치에 push / PR 발생 시 동작
on:
  # 여기서 master 브랜치에 push, PR 이벤트 발생 시 이벤트가 동작한다
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # spring-boot APP -> build -> push to DockerHub
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # JDK 17 셋팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Spring Boot APP(Gradle) 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # DockerHub 이미지 PUSH, 기존에 생성해 둔 PRIVATE REGISTRY에 이미지를 업로드 한다
      - name: docker hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo:latest